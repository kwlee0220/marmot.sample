plugins {
	id 'java'
	id 'application'
	id 'eclipse'
}

group = 'etri'
version = '20.02.12'

sourceCompatibility = '17'
targetCompatibility = '17'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

ext {
	kafka_client_version = '3.1.0'
}

repositories {
	mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
		allowInsecureProtocol = true
	}
	maven {
		url "https://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

dependencies {
	implementation project(':utils')
	implementation project(':utilsx')
	implementation project(':marmot.common')
	implementation project(':marmot.client')
	
	implementation "org.apache.kafka:kafka-clients:${kafka_client_version}"
}

task sourceJar(type: Jar) {
	// classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.charSet = 'UTF-8'
}
task javadocJar(type: Jar) {
	// classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

ext.distDir = "${System.env.HOME}/etc/marmot/marmot.sample.dist"
task distributeBinary(type:Copy) {
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include '.gitignore'
	}
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
						def entry = values.first()
						if ( entry.kind == 'src' ) {
							entry.includes = []
							entry.excludes = []
						}
						int index = cp.entries.indexOf entry
						cp.entries.removeAll values
						cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}