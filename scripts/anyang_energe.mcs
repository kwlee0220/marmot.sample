
def LAND_PRICES_2017 = "토지/개별공시지가_2017";
def LAND_PRICES = "토지/개별공시지가_2012_2016";
def GAS = "건물/건물에너지/가스사용량";
def ELECTRO = "건물/건물에너지/전기사용량";

def OUT_DIR = "분석결과/건물_에너지"
def OUT_MAP_GAS2017 = "$OUT_DIR/map_gas2017"
def OUT_MAP_ELECTRO2017 = "$OUT_DIR/map_gas2017"
def OUT_GRID_GAS2017 = "$OUT_DIR/grid_gas2017"
def OUT_GRID_ELECTRO2017 = "$OUT_DIR/grid_gas2017"

def TEMP_DIR = "tmp/anyang/energe"
def TEMP_CADASTRAL = "$TEMP_DIR/cadastral"
def TEMP_GAS_2017 = "$TEMP_DIR/gas2017"
def TEMP_ELECTRO_2017 = "$TEMP_DIR/electro2017"
def TEMP_PNU_GAS = "$OUT_DIR/pnu_gas"
def TEMP_PNU_ELECTRO = "$OUT_DIR/pnu_electro"

def GC_INFO = 'the_geom(EPSG:5186)'
def COL_NAMES = (1..12).collect { "month_$it" }


createDataset(TEMP_CADASTRAL) {
	geometry GC_INFO
	force = true
	from plan('연속지적도 추출') {
		load(LAND_PRICES_2017)
		project('the_geom,pnu')
		shard(1)
	}
}

createDataset(TEMP_GAS_2017) {
	force = true
	from plan('2017년 월별 가스 사용량 합계') {
		load(GAS)
		defineColumn("year:short", "사용년월.substring(0, 4)")
		filter("year == 2017")
		defineColumn("month:short", "사용년월.substring(4, 6)")
		update("사용량 = Math.max(사용량, 0)")
		aggregateByGroup("pnu,month", workerCount: 1) { usage = sum("사용량") }
		project "pnu,month,usage"
	}
}

createDataset(TEMP_ELECTRO_2017) {
	force = true
	from plan('2017년 월별 전기 사용량 합계') {
		load ELECTRO
		defineColumn "year:short", "사용년월.substring(0, 4)"
		filter "year == 2017"
		defineColumn "month:short", "사용년월.substring(4, 6)"
		update "사용량 = Math.max(사용량, 0)"
		aggregateByGroup("pnu,month", workerCount: 1) { usage = sum("사용량") }
		project "pnu,month,usage"
	}
}


def outSchema = COL_NAMES.inject(RecordSchema.builder()) {
					b, n -> b.addColumn(n, DataType.LONG)
				}.build()
def outCols = 'left.*,right.{' + COL_NAMES.join(',') + '}'

createDataset(TEMP_PNU_GAS) {
	force = true
	from plan('put_side_by_size_gas') {
		load TEMP_GAS_2017
		defineColumn "tag:string", "'month_' + month"
		reduceToSingleRecordByGroup('pnu', outSchema, 'tag', 'usage')
	}
}
createDataset(OUT_MAP_GAS2017) {
	geometry GC_INFO
	force = true
	from plan('2017 가스사용량 연속지적도 매칭') {
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_PNU_GAS, 'pnu', output: outCols,
						type: LEFT_OUTER_JOIN, workerCount: 17)
		update COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
deleteDataset TEMP_PNU_GAS



createDataset(TEMP_PNU_ELECTRO) {
	force = true
	from plan('put_side_by_side_electro') {
		load TEMP_ELECTRO_2017
		defineColumn "tag:string", "'month_' + month"
		reduceToSingleRecordByGroup('pnu', outSchema, 'tag', 'usage')
	}
}
createDataset(OUT_MAP_ELECTRO2017) {
	geometry GC_INFO
	force = true
	from plan('2017 전력사용량 연속지적도 매칭') {
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_PNU_ELECTRO, 'pnu', output: outCols,
							type: LEFT_OUTER_JOIN, workerCount: 17)
		update COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
deleteDataset TEMP_PNU_ELECTRO

				
					
createDataset(OUT_GRID_GAS2017) {
	geometry GC_INFO
	force = true
	from plan('2017 가스 사용량 격자 분석') {
		load OUT_MAP_GAS2017
		assignGridCell('the_geom', squareGrid(dataset(OUT_MAP_GAS2017), size2d('1000x1000')))
		intersection("the_geom", "cell_geom", output:"overlap")
		defineColumn "ratio:double", "(ST_Area(overlap) /  ST_Area(the_geom))"
		update COL_NAMES.collect { "$it *= ratio" }.join("; ")
		aggregateByGroup("cell_id", tags: "cell_geom,cell_pos", workerCount: 7,
						COL_NAMES.collect { SUM(it).as(it) })
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("cell_geom as the_geom, x, y, *-{cell_geom,x,y}")
	}
}
				
createDataset(OUT_GRID_ELECTRO2017) {
	geometry GC_INFO
	force = true
	from plan('2017 전기 사용량 격자 분석') {
		load OUT_MAP_ELECTRO2017
		assignGridCell('the_geom', squareGrid(dataset(OUT_MAP_ELECTRO2017), size2d('1kmx1km')))
		intersection("the_geom", "cell_geom", output: "overlap")
		defineColumn "ratio:double", "(ST_Area(overlap) /  ST_Area(the_geom))"
		update(COL_NAMES.collect { "$it *= ratio" }.join("; "))
		aggregateByGroup("cell_id", tags: "cell_geom,cell_pos", workerCount: 7,
						COL_NAMES.collect { SUM(it).as(it) })
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("cell_geom as the_geom, x, y, *-{cell_geom,x,y}")
	}
}
