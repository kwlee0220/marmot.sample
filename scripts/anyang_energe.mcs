def YEAR = 2018

def LAND_PRICES_YEAR = "토지/개별공시지가_$YEAR";
def LAND_PRICES = "토지/개별공시지가";
def GAS = "건물/건물에너지/가스사용량";
def ELECTRO = "건물/건물에너지/전기사용량";

def OUT_DIR = "분석결과/건물_에너지"
def OUT_MAP_LAND = "$OUT_DIR/map_land_price"
def OUT_GRID_LAND = "$OUT_DIR/grid_land_price"
def OUT_MAP_GAS_YEAR = "$OUT_DIR/map_gas_$YEAR"
def OUT_GRID_GAS_YEAR = "$OUT_DIR/grid_gas_$YEAR"
def OUT_MAP_ELECTRO_YEAR = "$OUT_DIR/map_electro_$YEAR"
def OUT_GRID_ELECTRO_YEAR = "$OUT_DIR/grid_electro_$YEAR"
def OUT_MAP_CO2_YEAR = "$OUT_DIR/map_co2_$YEAR"
def OUT_GRID_CO2_YEAR = "$OUT_DIR/grid_co2_$YEAR"

def TEMP_DIR = "tmp/anyang/energe"
def TEMP_CADASTRAL = "$TEMP_DIR/cadastral"
def TEMP_GRID_CADASTRAL = "$TEMP_DIR/grid_cadastral"
def TEMP_GAS_YEAR = "$TEMP_DIR/gas_$YEAR"
def TEMP_ELECTRO_YEAR = "$TEMP_DIR/electro_$YEAR"
def TEMP_LAND = "$TEMP_DIR/landprice"
def TEMP_CO2_POOL_YEAR = "$TEMP_DIR/co2_pool"
def TEMP_CO2_YEAR = "$TEMP_DIR/co2_$YEAR"

def GC_INFO = 'the_geom(EPSG:5186)'
def CELL_SIZE = Size2d(1000, 1000)

def MONTH_COL_NAMES = (1..12).collect { "month_$it" }
def MONTH_OUT_SCHEMA = RecordSchema(MONTH_COL_NAMES.collect{"$it:long"}.join(','))
def MONTH_JOIN_OUT_COLS = 'left.*,right.{' + MONTH_COL_NAMES.join(',') + '}'
def YEAR_COL_NAMES = (2012..YEAR).collect { "year_$it" }
def YEAR_OUT_SCHEMA = RecordSchema(YEAR_COL_NAMES.collect{"$it:long"}.join(','))
def YEAR_JOIN_OUT_COLS = "left.*,right.{" + YEAR_COL_NAMES.join(",") + "}"


createDataSet(TEMP_CADASTRAL) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년도 개별공시지가 데이터에서 공간 정보만 추출") {
		load(LAND_PRICES_YEAR)
		project('the_geom,고유번호 as pnu')
		shard(1)
	}
}
createDataSet(TEMP_GRID_CADASTRAL) {
	geometry GC_INFO
	force = true
	from plan('연속지적도에 1km x 1km 격자정보 부여') {
		load(TEMP_CADASTRAL)
		
		// 각 지적위치에 해당하는 1km 격자 정보를 첨부한다.
		assignGridCell('the_geom', SquareGrid(DataSet(TEMP_CADASTRAL), CELL_SIZE))
		
		// 격자와 지적 공간 정보 겹치는 영역을 계산하여, 지적에 격자가 차지하는 비율을 계산한다.
		intersection("the_geom", "cell_geom", output:"overlap")
		defineColumn("ratio:double", "ST_Area(overlap) /  ST_Area(the_geom)")
		
		project('cell_geom as the_geom,pnu,ratio,cell_pos,cell_id')
	}
}

//
//
//	연차별 개별공시지가 공간정보 매핑 및 격자 분석
//
//
createDataSet(TEMP_LAND) {
	force = true
	from plan("2012-${YEAR}년 연도별 개별공시지가 집계") {
		// 2012-2018년도 개별공시지가 데이터를 적재한다.
		load LAND_PRICES
		
		project("고유번호 as pnu, 기준년도 as year, 개별공시지가 as usage")
		expand("tag:string", "tag = 'year_' + year")
		
		// pnu별로 그룹핑을하고, 연도태그를 기준으로 공시지가('usage') 값을 병렬로 수집한다.
		reduceToSingleRecordByGroup('pnu', YEAR_OUT_SCHEMA, 'tag', 'usage', workerCount: 17)
		update YEAR_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_MAP_LAND) {
	force = true
	geometry GC_INFO
	from plan('연도별 개별공시지가에 공간정보 매핑') {
		// 격자분석을 위해, 연도별 개별공시지가의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_LAND, 'pnu', output: YEAR_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 25)
		update YEAR_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_GRID_LAND) {
	geometry GC_INFO
	force = true
	from plan("2012-${YEAR}년도 년도별 개별공시지가 격자 분석") {
		// 격자분석을 위해, 연도별 개별공시지가의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_GRID_CADASTRAL, 'pnu', TEMP_LAND, 'pnu', output: YEAR_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 25)
		// 비율에 따라 공시지가를 보정한다.
		update YEAR_COL_NAMES.collect {"$it = ($it != null) ? $it * ratio : 0;"}.join(' ')
		
		// 공시지가는 평망미터당 지가이므로, 평당액수에 면적을 곱한다.
		defineColumn("area:double", "ST_Area(the_geom)")
		update(YEAR_COL_NAMES.collect { "$it *= area" }.join('; '))
		
		// 각 격자별로 전력 사용량의 총합을 구한다.
		aggregateByGroup("cell_id", tags: "the_geom,cell_pos", workerCount: 7,
						YEAR_COL_NAMES.collect { SUM(it).as(it) })
		
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("the_geom, x, y, *-{the_geom,x,y}")
	}
}


//
//
//	2018년도 월별 가스사용량 공간정보 매핑 및 격자 분석
//
//
createDataSet(TEMP_GAS_YEAR) {
	force = true
	from plan("${YEAR}년 월별 가스 사용량 합계") {
		// 2018년도 가스 사용량 데이터를 적재한다.
		load(GAS)
		
		// 사용년월에서 '년' 정보를 따로 뽑고, 2018년도 데이터만 선택한다.
		defineColumn("year:short", "사용년월.substring(0, 4)")
		filter("year == 2018")
		
		// '사용연월'에서 '월' 정보를 뽑는다.
		defineColumn("month:short", "사용년월.substring(4, 6)")
		
		// (pnu, month)단위로 그룹핑을하고, 각 그룹에 속한 레코드들의 사용량 값의 합계를 구한다.
		aggregateByGroup("pnu,month", workerCount: 1) { usage = SUM("사용량") }
		
		// 'month' 값을 이용하여 태그 컬럼을 생성한다.
		defineColumn("tag:string", "'month_' + month")
		
		// pnu별로 그룹핑을하고, 개월 태그를 기준으로 사용량('usage') 값을 병렬로 수집한다.
		reduceToSingleRecordByGroup('pnu', MONTH_OUT_SCHEMA, 'tag', 'usage')
		update MONTH_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_MAP_GAS_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년 월별 가스 사용량에 공간정보 매핑") {
		// 격자분석을 위해, 2018년도 월별 가스 사용량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_GAS_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 17)
		update MONTH_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_GRID_GAS_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년도 월별 가스 사용량 격자 분석") {
		// 격자분석을 위해, 2018년도 월별 가스 사용량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_GRID_CADASTRAL, 'pnu', TEMP_GAS_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 17)
		
		// 비율에 따라 사용량을 곱한다.
		update(MONTH_COL_NAMES.collect { "$it *= ratio" }.join("; "))
		
		// 각 격자별로 가스 사용량의 총합을 구한다.
		aggregateByGroup("cell_id", tags: "the_geom,cell_pos", workerCount: 7,
						MONTH_COL_NAMES.collect { SUM(it).as(it) })
		
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("the_geom, x, y, *-{the_geom,x,y}")
	}
}


//
//
//	2018년도 월별 전기사용량 공간정보 매핑 및 격자 분석
//
//
createDataSet(TEMP_ELECTRO_YEAR) {
	force = true
	from plan("${YEAR}년 월별 전기 사용량 합계") {
		// 2018년도 전기 사용량 데이터를 적재한다.
		load ELECTRO
		
		// 사용년월에서 '년' 정보를 따로 뽑고, 2018년도 데이터만 선택한다.
		defineColumn "year:short", "사용년월.substring(0, 4)"
		filter "year == 2018"
		
		// '사용연월'에서 '월' 정보를 뽑는다.
		defineColumn "month:short", "사용년월.substring(4, 6)"
		
		// (pnu, month)단위로 그룹핑을하고, 각 그룹에 속한 레코드들의 사용량 값의 합계를 구한다.
		aggregateByGroup("pnu,month", workerCount: 1) { usage = SUM("사용량") }
		
		// 'month' 값을 이용하여 태그 컬럼을 생성한다.
		defineColumn("tag:string", "'month_' + month")
		
		// pnu별로 그룹핑을하고, 개월 태그를 기준으로 사용량('usage') 값을 병렬로 수집한다.
		reduceToSingleRecordByGroup('pnu', MONTH_OUT_SCHEMA, 'tag', 'usage')
		update MONTH_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_MAP_ELECTRO_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년 월별 전기 사용량에 공간정보 매핑") {
		// 격자분석을 위해, 2018년도 월별 전기 사용량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_ELECTRO_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 17)
		update MONTH_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_GRID_ELECTRO_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년도 전력 사용량 격자 분석") {
		// 격자분석을 위해, 2018년도 월별 전력 사용량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_GRID_CADASTRAL, 'pnu', TEMP_ELECTRO_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 17)
		
		// 비율에 따라 사용량을 곱한다.
		update MONTH_COL_NAMES.collect { "$it *= ratio" }.join("; ")
		
		// 각 격자별로 전력 사용량의 총합을 구한다.
		aggregateByGroup("cell_id", tags: "the_geom,cell_pos", workerCount: 7,
						MONTH_COL_NAMES.collect { SUM(it).as(it) })
		
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("the_geom, x, y, *-{the_geom,x,y}")
	}
}


//
//
//	2018년도 월별 전기사용량 및 전기사용량을 활용한 탄소배출량 공간정보 매핑 및 격자 분석
//
//
def ELECTRO_CO2_EXPR = MONTH_COL_NAMES.collect{"$it = $it * 0.46;"}.join(';')
createDataSet(TEMP_CO2_POOL_YEAR) {
	force = true
	from plan("${YEAR}년 월별 전기 사용량을 활용한 탄소배출량 계산") {
		// 2018년 월별 가스 사용량 데이터를 적재한다.
		load(TEMP_ELECTRO_YEAR)
		expand(MONTH_COL_NAMES.collect{"$it:double"}.join(','), ELECTRO_CO2_EXPR)
	}
}

def GAS_CO2_RATIO = ((40*56100) + (40*23) + (40*29.6)) / 1000000
def GAS_CO2_EXPR = MONTH_COL_NAMES.collect{"$it = $it * $GAS_CO2_RATIO;"}.join(';')
appendIntoDataSet(TEMP_CO2_POOL_YEAR) {
	from plan("${YEAR}년 월별 가스 사용량을 활용한 탄소배출량 계산") {
		// 2018년 월별 가스 사용량 데이터를 적재한다.
		load(TEMP_GAS_YEAR)
		expand(MONTH_COL_NAMES.collect{"$it:double"}.join(','), GAS_CO2_EXPR)
	}
}
createDataSet(TEMP_CO2_YEAR) {
	force = true
	from plan("${YEAR}년 월별 전기 사용량에 공간정보 매핑") {
		load(TEMP_CO2_POOL_YEAR)
		aggregateByGroup('pnu', MONTH_COL_NAMES.collect { SUM(it).as(it) })
		expand(MONTH_COL_NAMES.collect{"$it:float"}.join(','))
	}
}
createDataSet(OUT_MAP_CO2_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년 월별 탄소 배출량에 공간정보 매핑") {
		// 격자분석을 위해, 2018년도 월별 전기 사용량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_CADASTRAL, 'pnu', TEMP_CO2_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 25)
		update MONTH_COL_NAMES.collect { "if ($it == null) {$it = 0}" }.join(' ')
	}
}
createDataSet(OUT_GRID_CO2_YEAR) {
	geometry GC_INFO
	force = true
	from plan("${YEAR}년도 월별 탄소 배출량 격자 분석") {
		// 격자분석을 위해, 2018년도 월별 탄소 배출량의 PNU 값을에 해당하는 연속지적도 상의 공간 정보를 첨부한다.
		loadHashJoinFile(TEMP_GRID_CADASTRAL, 'pnu', TEMP_CO2_YEAR, 'pnu', output: MONTH_JOIN_OUT_COLS,
						type: LEFT_OUTER_JOIN, workerCount: 25)
		
		// 비율에 따라 사용량을 곱한다.
		update MONTH_COL_NAMES.collect { "$it *= ratio" }.join("; ")
		
		// 각 격자별로 전력 사용량의 총합을 구한다.
		aggregateByGroup("cell_id", tags: "the_geom,cell_pos", workerCount: 7,
						MONTH_COL_NAMES.collect { SUM(it).as(it) })
		
		expand("x:long,y:long", "x = cell_pos.getX(); y = cell_pos.getY()")
		project("the_geom, x, y, *-{the_geom,x,y}")
	}
}

deleteDataSet TEMP_DIR


def HOME = System.env.HOME;
def SPLIT_DIR = "tmp/anyang/energe"
def SHP_DIR = "$HOME/tmp/anyang/energe"
def EXPORT_SHP_OPTS = { charset 'euc-kr'; splitSize '1g'; reportInterval 1000000; force true }
def SIDO_CODES = DataSet("구역/시도").read().collect { it.CTPRVN_CD }

exportDataSetToShapefile(OUT_GRID_GAS_YEAR, "$SHP_DIR/grid_gas_$YEAR", EXPORT_SHP_OPTS)
run plan("split_gas_by_sido") {
	load(OUT_MAP_GAS_YEAR)
	defineColumn("sido:string", "pnu.substring(0,2)")
	storeByGroup("sido", "$SPLIT_DIR/gas_$YEAR", geometry: GC_INFO, force: true)
}
SIDO_CODES.each {
	exportDataSetToShapefile("$SPLIT_DIR/gas_$YEAR/$it", "$SHP_DIR/map_gas_$YEAR/$it", EXPORT_SHP_OPTS)
}
deleteDataSet "$SPLIT_DIR/gas_$YEAR"

exportDataSetToShapefile(OUT_GRID_ELECTRO_YEAR, "$SHP_DIR/grid_electro_$YEAR", EXPORT_SHP_OPTS)
run plan("split_electro_by_sido") {
	load(OUT_MAP_ELECTRO_YEAR)
	defineColumn("sido:string", "pnu.substring(0,2)")
	storeByGroup("sido", "$SPLIT_DIR/electro_$YEAR", geometry: GC_INFO, force: true)
}
SIDO_CODES.each {
	exportDataSetToShapefile("$SPLIT_DIR/electro_$YEAR/$it", "$SHP_DIR/map_electro_$YEAR/$it",
							EXPORT_SHP_OPTS)
}
deleteDataSet "$SPLIT_DIR/electro_$YEAR"

exportDataSetToShapefile(OUT_GRID_CO2_YEAR, "$SHP_DIR/grid_co2_$YEAR", EXPORT_SHP_OPTS)
run plan("split_co2_by_sido") {
	load(OUT_MAP_CO2_YEAR)
	defineColumn("sido:string", "pnu.substring(0,2)")
	storeByGroup("sido", "$SPLIT_DIR/co2_$YEAR", geometry: GC_INFO, force: true)
}
SIDO_CODES.each {
	exportDataSetToShapefile("$SPLIT_DIR/co2_$YEAR/$it", "$SHP_DIR/map_co2_$YEAR/$it",
							EXPORT_SHP_OPTS)
}
deleteDataSet "$SPLIT_DIR/co2_$YEAR"

exportDataSetToShapefile(OUT_GRID_LAND, "$SHP_DIR/grid_land_price", EXPORT_SHP_OPTS)
run plan("split_land_by_sido") {
	load(OUT_MAP_LAND)
	defineColumn("sido:string", "pnu.substring(0,2)")
	storeByGroup("sido", "$SPLIT_DIR/land_price", geometry: GC_INFO, force: true)
}
SIDO_CODES.each {
	exportDataSetToShapefile("$SPLIT_DIR/land_price/$it", "$SHP_DIR/map_land_price/$it",
							EXPORT_SHP_OPTS)
}
deleteDataSet "$SPLIT_DIR/land_price"

deleteDataSet "$SPLIT_DIR"