
def LAND_USAGE = "토지/용도지역지구";
def POLITICAL = "구역/통합법정동";
def BLOCK_CENTERS = "구역/지오비전_집계구_Point";
def CADASTRAL = "구역/연속지적도_2017"
def BUILDINGS = "건물/통합정보"
def CARD_SALES = "주민/카드매출/월별_시간대/2015";
def FLOW_POP = "주민/유동인구/월별_시간대/2015";

def OUT_DIR = "tmp/bizarea"
def TEMP_BIG_CITIES = "$OUT_DIR/big_cities"
def TEMP_BIZ_AREA = "$OUT_DIR/area";
def BIZ_GRID = "$OUT_DIR/grid100";
def BIZ_GRID_SALES = "$OUT_DIR/grid100_sales"
def BIZ_GRID_FLOW_POP = "$OUT_DIR/grid100_pop";

def GC_INFO = 'the_geom(EPSG:5186)'
def MARMOT_DATA = System.getenv()['MARMOT_DATA']

def watch = utils.StopWatch.start();
def SIDO_EXPR = '[' + [11,26,27, 28, 29, 30, 31].collect {"'${it}'"}.join(',') + ']'
def SGG_EXPR = '[' + [41115,41111,41117, 41113, 48125, 48123,48127, 48121, 48129,41281, 41285, 41287].collect {"'${it}'"}.join(',') + ']'
def initExpr = String.format("_sid_cd=%s; _sgg_cd=%s", SIDO_EXPR, SGG_EXPR)

//  연속지적도에서 대도시 영역을 추출한다.
createDataSet(TEMP_BIG_CITIES) {
	geometry GC_INFO
	force = true
	from plan('대도시지역 추출') {
		load(POLITICAL)
		defineColumn("sid_cd:string", "bjd_cd.substring(0,2)")
		defineColumn("sgg_cd:string", "bjd_cd.substring(0,5)")
		filter("_sid_cd.contains(sid_cd) || _sgg_cd.contains(sgg_cd)", initializer: initExpr)
	}
}
clusterDataSet TEMP_BIG_CITIES

// 용도지구에서 상업지역 추출
initExpr = '_types = [' +
			["일반상업지역","유통상업지역","근린상업지역", "중심상업지역"].collect {"'${it}'"}.join(',') +
			']'
createDataSet(TEMP_BIZ_AREA) {
	geometry GC_INFO
	force = true
	from plan('상업지역 추출') {
		load(LAND_USAGE)
		filter("_types.contains(dgm_nm)", initializer: initExpr)
		project('the_geom')
	}
}
clusterDataSet TEMP_BIZ_AREA

createDataSet(BIZ_GRID) {
	geometry GC_INFO
	force = true
	from plan('상업지역 추출') {
		loadGrid(SquareGrid(DataSet(CADASTRAL), Size2d('100x100')))
		spatialSemiJoin('the_geom', TEMP_BIZ_AREA)
		spatialJoin('the_geom', TEMP_BIG_CITIES, output: "*-{cell_pos},param.sgg_cd")
		spatialJoin('the_geom', BLOCK_CENTERS, output: "*-{cell_pos},param.block_cd")
	}
}
deleteDataSet TEMP_BIG_CITIES, TEMP_BIZ_AREA


createDataSet("$OUT_DIR/grid100_land") {
	geometry GC_INFO
	force = true
	from plan('대도시 상업지역 구역별 건축물 수와 면적 집계') {
		load(BUILDINGS)
		spatialJoin('the_geom', BIZ_GRID, output: "건축물용도코드,대지면적,param.*")
		aggregateByGroup('cell_id,block_cd,건축물용도코드', tags: "the_geom,sgg_cd", workerCount:3) {
			대지면적 = sum("대지면적")
			bld_cnt = count()
		}
		project 'the_geom, *-{the_geom}'
	}
}

def sumExpr = (0..23).collect { String.format("sale_amt_%02dtmst", it) }.join('+')
createDataSet(BIZ_GRID_SALES) {
	geometry GC_INFO
	force = true
	from plan('대도시 상업지역 구역별 카드 일매출 집계') {
		load CARD_SALES
		defineColumn "daily_sales:double", sumExpr
		project "std_ym,block_cd,daily_sales"
		hashJoin "block_cd", BIZ_GRID, 'block_cd', output: "param.*,std_ym,daily_sales",
					workerCount: 64
		aggregateByGroup('std_ym,cell_id', tags: "the_geom,sgg_cd", workerCount: 3) { daily_sales = sum("daily_sales") }
		project 'the_geom, *-{the_geom}'
	}
}

def avgExpr = (0..23).collect { String.format("avg_%02dtmst", it) }.join('+')
avgExpr = String.format("(%s)/24", avgExpr);
createDataSet(BIZ_GRID_FLOW_POP) {
	geometry GC_INFO
	force = true
	from plan('대도시 상업지역 구역별 유동인구수 집계') {
		load FLOW_POP
		// 시간대 단위의 유동인구는 모두 합쳐 하루 매출액을 계산한다. 
		defineColumn "flow_pop:double", avgExpr
		project "std_ym,block_cd,flow_pop"
		// BIZ_GRID와 소지역 코드를 이용하여 조인하여, 대도시 상업지역과 겹치는
		// 유동인구 구역을 뽑는다.
		hashJoin "block_cd", BIZ_GRID, 'block_cd', output: "param.*,std_ym,flow_pop", workerCount: 32
		aggregateByGroup('std_ym,cell_id', tags: "the_geom,sgg_cd", workerCount: 3) { flow_pop = avg("flow_pop") }
		project 'the_geom, *-{the_geom}'
	}
}

createDataSet("$OUT_DIR/grid100_pop") {
	geometry GC_INFO
	force = true
	from plan('대도시 상업지역 구역별 카드매출액 및 유동인구수 통합') {
		load BIZ_GRID_SALES
		hashJoin "std_ym,cell_id,sgg_cd", BIZ_GRID_FLOW_POP, 'std_ym,cell_id,sgg_cd',
				output:'*, param.{the_geom as param_the_geom,std_ym as param_std_ym,cell_id as param_cell_id,flow_pop}',
				workerCount: 16
		update "if ( std_ym == null ) {std_ym = param_std_ym;} if ( cell_id == null ) {cell_id = param_cell_id;} if ( sgg_cd == null ) {sgg_cd = param_sgg_cd;}"
		project("*-{param_the_geom,param_std_ym,param_cell_id,param_sgg_cd}")
		// 최종 결과에 행정도 코드를 부여한다.
		spatialJoin 'the_geom', POLITICAL, output: "*-{cell_pos},param.*-{the_geom,sgg_cd}"
	}
}